    1: import inspect
    1: import sys
       
       
    2: class Serializable(object):
       
    1:     def __init__(self, *args, **kwargs):
               self.__args = args
               self.__kwargs = kwargs
       
    1:     def quick_init(self, locals_):
   16:         if getattr(self, "_serializable_initialized", False):
    1:             return
   15:         if sys.version_info >= (3, 0):
   15:             spec = inspect.getfullargspec(self.__init__)
                   # Exclude the first "self" parameter
   15:             if spec.varkw:
    1:                 kwargs = locals_[spec.varkw]
                   else:
   14:                 kwargs = dict()
               else:
                   spec = inspect.getargspec(self.__init__)
                   if spec.keywords:
                       kwargs = locals_[spec.keywords]
                   else:
                       kwargs = dict()
   15:         if spec.varargs:
                   varargs = locals_[spec.varargs]
               else:
   15:             varargs = tuple()
  181:         in_order_args = [locals_[arg] for arg in spec.args][1:]
   15:         self.__args = tuple(in_order_args) + varargs
   15:         self.__kwargs = kwargs
   15:         setattr(self, "_serializable_initialized", True)
       
    1:     def __getstate__(self):
               return {"__args": self.__args, "__kwargs": self.__kwargs}
       
    1:     def __setstate__(self, d):
               out = type(self)(*d["__args"], **d["__kwargs"])
               self.__dict__.update(out.__dict__)
       
    1:     @classmethod
    1:     def clone(cls, obj, **kwargs):
               assert isinstance(obj, Serializable)
               d = obj.__getstate__()
       
               # Split the entries in kwargs between positional and keyword arguments
               # and update d['__args'] and d['__kwargs'], respectively.
               if sys.version_info >= (3, 0):
                   spec = inspect.getfullargspec(obj.__init__)
               else:
                   spec = inspect.getargspec(obj.__init__)
               in_order_args = spec.args[1:]
       
               d["__args"] = list(d["__args"])
               for kw, val in kwargs.items():
                   if kw in in_order_args:
                       d["__args"][in_order_args.index(kw)] = val
                   else:
                       d["__kwargs"][kw] = val
       
               out = type(obj).__new__(type(obj))
               out.__setstate__(d)
               return out
