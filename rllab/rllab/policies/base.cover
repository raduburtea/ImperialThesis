    1: from rllab.core.parameterized import Parameterized
       
       
    2: class Policy(Parameterized):
    1:     def __init__(self, env_spec):
    1:         Parameterized.__init__(self)
    1:         self._env_spec = env_spec
       
           # Should be implemented by all policies
       
    1:     def get_action(self, observation):
               raise NotImplementedError
       
    1:     def reset(self):
 5000:         pass
       
    1:     @property
    1:     def observation_space(self):
100000:         return self._env_spec.observation_space
       
    1:     @property
    1:     def action_space(self):
               return self._env_spec.action_space
       
    1:     @property
    1:     def recurrent(self):
               """
               Indicates whether the policy is recurrent.
               :return:
               """
    5:         return False
       
    1:     def log_diagnostics(self, paths):
               """
               Log extra information per iteration based on the collected paths
               """
               pass
       
    1:     @property
    1:     def state_info_keys(self):
               """
               Return keys for the information related to the policy's state when taking an action.
               :return:
               """
    4:         return list()
       
    1:     def terminate(self):
               """
               Clean up operation
               """
               pass
       
       
    2: class StochasticPolicy(Policy):
       
    1:     @property
    1:     def distribution(self):
               """
               :rtype Distribution
               """
               raise NotImplementedError
       
    1:     def dist_info_sym(self, obs_var, state_info_vars):
               """
               Return the symbolic distribution information about the actions.
               :param obs_var: symbolic variable for observations
               :param state_info_vars: a dictionary whose values should contain information about the state of the policy at
               the time it received the observation
               :return:
               """
               raise NotImplementedError
       
    1:     def dist_info(self, obs, state_infos):
               """
               Return the distribution information about the actions.
               :param obs_var: observation values
               :param state_info_vars: a dictionary whose values should contain information about the state of the policy at
               the time it received the observation
               :return:
               """
               raise NotImplementedError
