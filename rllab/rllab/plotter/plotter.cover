    1: import atexit
    1: from queue import Empty
    1: from multiprocessing import Process, Queue
    1: from rllab.sampler.utils import rollout
    1: import numpy as np
       
    1: __all__ = [
    1:     'init_worker',
    1:     'init_plot',
    1:     'update_plot'
       ]
       
    1: process = None
    1: queue = None
       
       
    1: def _worker_start():
           env = None
           policy = None
           max_length = None
           try:
               while True:
                   msgs = {}
                   # Only fetch the last message of each type
                   while True:
                       try:
                           msg = queue.get_nowait()
                           msgs[msg[0]] = msg[1:]
                       except Empty:
                           break
                   if 'stop' in msgs:
                       break
                   elif 'update' in msgs:
                       env, policy = msgs['update']
                       # env.start_viewer()
                   elif 'demo' in msgs:
                       param_values, max_length = msgs['demo']
                       policy.set_param_values(param_values)
                       rollout(env, policy, max_path_length=max_length, animated=True, speedup=5)
                   else:
                       if max_length:
                           rollout(env, policy, max_path_length=max_length, animated=True, speedup=5)
           except KeyboardInterrupt:
               pass
       
       
    1: def _shutdown_worker():
           if process:
               queue.put(['stop'])
               queue.close()
               process.join()
       
       
    1: def init_worker():
           global process, queue
           queue = Queue()
           process = Process(target=_worker_start)
           process.start()
           atexit.register(_shutdown_worker)
       
       
    1: def init_plot(env, policy):
           queue.put(['update', env, policy])
       
       
    1: def update_plot(policy, max_length=np.inf):
           queue.put(['demo', policy.get_param_values(), max_length])
