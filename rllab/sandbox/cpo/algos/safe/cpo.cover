    1: from sandbox.cpo.algos.safe.policy_gradient_safe import PolicyGradientSafe
    1: from sandbox.cpo.optimizers.conjugate_constraint_optimizer import ConjugateConstraintOptimizer
    1: from rllab.core.serializable import Serializable
       
       
    2: class CPO(PolicyGradientSafe, Serializable):
    1:     """
           Constrained Policy Optimization
           """
       
    1:     def __init__(
                   self,
                   neptune_instance,
                   optimizer=None,
                   optimizer_args=None,
                   safety_constraint=None,
                   safety_tradeoff=False,
                   learn_safety_tradeoff_coeff=False,
                   **kwargs):
               Serializable.quick_init(self, locals())
               if optimizer is None:
                   if optimizer_args is None:
                       optimizer_args = dict()
                   optimizer = ConjugateConstraintOptimizer(**optimizer_args)
       
       
               if 'safety_constrained_optimizer' in kwargs.keys():
                   kwargs.pop('safety_constrained_optimizer')
       
               super(CPO, self).__init__(optimizer=optimizer, 
                                          safety_constrained_optimizer=True,
                                          safety_constraint=safety_constraint,
                                          safety_tradeoff=safety_tradeoff,
                                          learn_safety_tradeoff_coeff=learn_safety_tradeoff_coeff,
                                          neptune_instance = neptune_instance,
                                          **kwargs)
